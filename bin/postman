<?php

require $_composer_autoload_path ?? __DIR__ . '/../vendor/autoload.php';

//#region Doc builder

use Drewlabs\Htr\Postman\Collections\Collection;
use Drewlabs\Htr\Project;
use Drewlabs\Htr\RequestDirectory;
use Drewlabs\Htr\Utilities\Console;
use Drewlabs\Htr\Utilities\Uuidv4Factory;

/**
 * Generate Postman collection from HTr project
 * 
 * @param string $inputPath 
 * @param array $options 
 * @param string|null $outputPath 
 * @param string $baseDirectory 
 * @return void 
 * @throws Exception 
 * @throws InvalidArgumentException 
 */
function htr_postman_build(string $inputPath, array $options, string $outputPath = __DIR__, $baseDirectory = __DIR__)
{

    // Resolve the realpath to the path specified by the program user
    $path = @htr_resolve_path($inputPath, $baseDirectory);

    if (is_dir($path)) {
        $directory = new RequestDirectory;
        $directory->setId(Uuidv4Factory::new()->create());
        $directory->setName(ucfirst(basename($path)));
        $variables = [];
        htr_compile_project_directory($path, $options, $directory, $variables);
        $project = Project::make($variables, $directory->getItems() ?? [], $options['name'] ?? (sprintf("%s %s", strtoupper($directory->getName() ?? "HTR"), "Project")));
    } else {
        $attributes = isset($options['json']) && boolval($options['json'])  ? @json_decode(file_get_contents($path), true) : \yaml_parse(file_get_contents($path));
        if (!is_array($attributes) || empty($attributes)) {
            echo Console::white(sprintf("Failed to parse configuration file located at %s", $inputPath), null, 'red') . PHP_EOL . PHP_EOL;
            return;
        }
        $project = Project::fromAttributes($attributes);
    }

    // #region Create the output function
    (function ($output) use ($outputPath) {
        if (is_string($output)) {
            if (!is_dir($dirname = dirname($outputPath))) {
                mkdir($dirname, 0777, true);
            }
            // Write tests log file
            file_put_contents($outputPath, $output);

            echo Console::white("\nPostman collection written to $outputPath", null, 'green') . PHP_EOL;
            echo PHP_EOL;
        }
    })(json_encode(Collection::fromProject($project)->toArray(), JSON_PRETTY_PRINT|JSON_UNESCAPED_SLASHES));
    // #endregion Create the output function

    // Execute the completion steps
    // $then(implode(PHP_EOL, $output) . PHP_EOL);
}
//#endregion Doc builder
